pragma solidity ^0.5.0;

interface IERC20 {
   
    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);
   
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    function totalSupply() external  view returns (uint256);
    

    event Transfer(address indexed from, address indexed to, uint256 value);

}

interface IERC1644  {

    // Controller Operation
    function isControllable() external view returns (bool);
    function controllerTransfer(address _from, address _to, uint256 _value, bytes32 _data, bytes32 _operatorData) external;
    function controllerRedeem(address _tokenHolder, uint256 _value, bytes32 _data, bytes32 _operatorData) external;
    
    
    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);
   
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    function totalSupply() external  view returns (uint256);

    // Controller Events
    event ControllerTransfer(
        address _controller,
        address indexed _from,
        address indexed _to,
        uint256 _value,
        bytes _data,
        bytes _operatorData
    );

    event ControllerRedemption(
        address _controller,
        address indexed _tokenHolder,
        uint256 _value,
        bytes _data,
        bytes _operatorData
    );

}



contract clauseShotgun  {
    
    enum EtatsContrat {
		none, //
		ouvert,
		initialise, // 
        ferme		
        
    }
	
	EtatsContrat public etatContrat;
    
    
    struct Associe {
        uint256 actions;
        bool initie ;
        bool droitExerce;
    }
    
    mapping (address => Associe) public actionsAssocies;

    address initiateur;
    address associeDesigne;

    IERC1644 public tokenAction;      
    IERC20 public tokenPaiement;     
    
    uint256 public nbActionsInitiateur; 
    uint256 public nbActionsAssocieD;
    
    uint256 public prixAction = 10;    
    uint256 public delai;       
    uint256 public montantA;
    uint256 public montantB;
    uint256 public totalActions;
    
    bytes32 data;
    bytes32 operatorData;
    
    
    
    // constructor qui set l'etat et les token le prix de l'action 

    
    function initiation (address _associeDesigne) public { //** utiliser la convention
        
        require (etatContrat == EtatsContrat.ouvert);
        require (tokenAction.balanceOf(msg.sender) > 0); //** check si est un actionnaire
        require (tokenAction.balanceOf(_associeDesigne) > 0); //** check si est un actionnaire
        require (actionsAssocies[msg.sender].initie == false); 
        
        initiateur = msg.sender;
        actionsAssocies[initiateur].initie = true;
        associeDesigne = _associeDesigne;
        
        nbActionsInitiateur = tokenAction.balanceOf(msg.sender);
        nbActionsAssocieD = tokenAction.balanceOf(associeDesigne);

        require(tokenAction.transferFrom(msg.sender, address(this), nbActionsInitiateur));
        
        actionsAssocies[msg.sender].actions += nbActionsInitiateur;
        
        tokenAction.controllerTransfer(associeDesigne, address(this), nbActionsAssocieD, data, operatorData);
        
        actionsAssocies[associeDesigne].actions += nbActionsAssocieD; 
        
        delai = now;
        
        montantA = nbActionsInitiateur * prixAction;
        
        montantB = nbActionsAssocieD * prixAction;
        
        etatContrat == EtatsContrat.initialise;
        
        //event();

    }
    
    
    
    
    function exerciceAssocieDes () public {
        
        require(etatContrat == EtatsContrat.initialise);
        
        require(now < delai + 30 days);
        
        require(msg.sender == associeDesigne);
        
        require(actionsAssocies[associeDesigne].droitExerce == false);
        
        actionsAssocies[associeDesigne].droitExerce = true;
        
        require(tokenPaiement.transferFrom(associeDesigne, initiateur , montantA));
        
        totalActions = nbActionsInitiateur + nbActionsAssocieD;

        require(tokenAction.transfer(associeDesigne, totalActions));
        
        actionsAssocies[associeDesigne].actions = 0;
        
        actionsAssocies[initiateur].actions = 0;

        etatContrat == EtatsContrat.ferme;
        
        //event();
    }
    
    
    
    
     
     
    function exerciceAssocieInit () public {
        
        require(etatContrat == EtatsContrat.ouvert);
        
        require(now > delai + 30 days);
        
        require( msg.sender == initiateur);
        
        require (actionsAssocies[initiateur].droitExerce== false);
        
        actionsAssocies[initiateur].droitExerce== true;
        
        require(tokenPaiement.transferFrom(initiateur, associeDesigne, montantB));
        
        totalActions = nbActionsAssocieD + nbActionsInitiateur;
        
        require(tokenAction.transfer(initiateur, totalActions));
        
        actionsAssocies[associeDesigne].actions = 0;
        
        actionsAssocies[initiateur].actions = 0;
        
        etatContrat == EtatsContrat.ferme;
        
        //event();
    }



    
    
}
